generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  username       String
  email          String    @unique
  password       String 
  user_type      UserType
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  address        String
  phone_number   String
  scores         Score[]
  comments       Comment[]
  borrows        Borrows[]
}

// model Borrow_history {
//   id             String     @id @default(uuid())
//   created_at     DateTime   @default(now())
//   updated_at     DateTime   @updatedAt
//   user_id        String
//   user           User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
//   book_id        String     @unique
//   book           Book       @relation(fields: [book_id], references: [id], onDelete: NoAction)
//   borrow_id      String     @unique
//   borrow         Borrows    @relation(fields: [borrow_id], references: [id])
// }

model Borrows {
  id             String   @id @default(uuid())
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  deadline       DateTime @default(dbgenerated("NOW() + interval '7 DAYS'"))
  expires        Boolean  @default(false)
  returned       Boolean  @default(false)
  date_of_borrow DateTime
  date_of_return DateTime?
  book_id        String   @unique
  book           Book     @relation(fields: [book_id], references: [id], onDelete: NoAction)
  user_id        String
  user           User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}


model Book {
  id             String     @id @default(uuid())
  title          String     @unique
  description    String
  total_score    Int        @default(0)
  pages          Int
  published_at   DateTime
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt
  borrowed       Borrows[]
  comments       Comment[]
  genres         Genre[]
  cover_pic      String?
  scores         Score[]
  author_id      String
  author         Author     @relation(fields: [author_id], references: [id], onDelete: Cascade)
}

model Genre {
  id         String   @id @default(uuid())
  genre      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  books      Book[]
}



model Author {
  id           String     @id @default(uuid())
  name         String     @unique
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  books        Book[]
}

model Score {
  id         String   @id @default(uuid())
  score      Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  book_id    String
  book       Book     @relation(fields: [book_id], references: [id], onDelete: Cascade)
  user_id    String
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Comment {
  id         String   @id @default(uuid())
  comment    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  book_id    String
  book       Book     @relation(fields: [book_id], references: [id], onDelete: Cascade)
  user_id    String
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

enum UserType {
  MEMBER
  ADMIN
}
